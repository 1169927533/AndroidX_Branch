plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
}

android {
    compileSdkVersion 30
    buildToolsVersion depend.buildToolsVersion

    defaultConfig {
        applicationId "com.example.androidx_branch"
        minSdkVersion 19
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

  /*  signingConfigs {
        release {
            keyAlias 'yuzhi'
            keyPassword 'sasdss'
            storeFile file('../android_newbranch.keystore')
            storePassword 'sasdss'
            v2SigningEnabled false
        }
    }
    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        release {
            debuggable false
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }*/

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        dataBinding true
    }
  /*  //这里是要输入的路径
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            //这里修改apk文件名
            if (variant.buildType.name == "release") {
                outputFileName = "${applicationId}-release-${variant.versionName}.apk"
            } else if (variant.buildType.name == 'debug') {
                outputFileName = "${applicationId}-debug-${variant.versionName}.apk"
            }
        }
    }*/

}
dependencies {
    implementation 'com.android.support:multidex:1.0.3'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation depend.constraintlayout()
    implementation 'com.github.1169927533.BaseMavenProject:baseYu:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'com.zhy:base-adapter:2.0.0'
    implementation 'com.google.code.gson:gson:2.8.6'
    //接入网络库
    implementation project(":lib_network")
    //图片裁剪
    implementation project(":MyCropBitmap")
    // im
    implementation project(":moduleIm")
    // 飘屏幕
    implementation project(":model_windscreen")
    //拼音库
    implementation 'com.github.promeg:tinypinyin:2.0.3' // TinyPinyin核心包，约80KB
    //basqqiucladapter
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.30'

    def fragment_version = "1.3.1"
    // Java language implementation
    implementation "androidx.fragment:fragment:$fragment_version"
    // Kotlin
    implementation "androidx.fragment:fragment-ktx:$fragment_version"
    // Testing Fragments in Isolation
    debugImplementation "androidx.fragment:fragment-testing:$fragment_version"

    def lifecycle_version = "2.3.0"
    def arch_version = "2.1.0"
    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    // Lifecycles only (without ViewModel or LiveData)
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"

    // Saved state module for ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"


    // Annotation processor
    kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    // optional - helpers for implementing LifecycleOwner in a Service
    implementation "androidx.lifecycle:lifecycle-service:$lifecycle_version"

    // optional - ProcessLifecycleOwner provides a lifecycle for the whole application process
    implementation "androidx.lifecycle:lifecycle-process:$lifecycle_version"

    // optional - ReactiveStreams support for LiveData
    implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycle_version"

    // optional - Test helpers for LiveData
    testImplementation "androidx.arch.core:core-testing:$arch_version"

    // 播放svga动画
    implementation 'com.github.yyued:SVGAPlayer-Android:2.5.11'

}